"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1630],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return d}});var a=n(7294);function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){s(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,a,s=function(t,e){if(null==t)return{};var n,a,s={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(s[n]=t[n]);return s}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(s[n]=t[n])}return s}var i=a.createContext({}),m=function(t){var e=a.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},l=function(t){var e=m(t.components);return a.createElement(i.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(t,e){var n=t.components,s=t.mdxType,o=t.originalType,i=t.parentName,l=c(t,["components","mdxType","originalType","parentName"]),h=m(n),d=s,p=h["".concat(i,".").concat(d)]||h[d]||u[d]||o;return n?a.createElement(p,r(r({ref:e},l),{},{components:n})):a.createElement(p,r({ref:e},l))}));function d(t,e){var n=arguments,s=e&&e.mdxType;if("string"==typeof t||s){var o=n.length,r=new Array(o);r[0]=h;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=t,c.mdxType="string"==typeof t?t:s,r[1]=c;for(var m=2;m<o;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8801:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return m},assets:function(){return l},toc:function(){return u},default:function(){return d}});var a=n(7462),s=n(3366),o=(n(7294),n(3905)),r=["components"],c={title:"Databasing"},i=void 0,m={unversionedId:"examples/databasing",id:"examples/databasing",title:"Databasing",description:"In this example we will be learning how to use databases by",source:"@site/docs/examples/databasing.mdx",sourceDirName:"examples",slug:"/examples/databasing",permalink:"/BeAPI/docs/beta/examples/databasing",editUrl:"https://github.com/beapijs/BeAPI/tree/docs/docs/examples/databasing.mdx",tags:[],version:"current",frontMatter:{title:"Databasing"},sidebar:"sidebar",previous:{title:"Migrating To V2",permalink:"/BeAPI/docs/beta/migrating"},next:{title:"Client",permalink:"/BeAPI/docs/beta/Classes/client"}},l={},u=[{value:"Typescript",id:"typescript",level:2},{value:"Javascript",id:"javascript",level:2}],h={toc:u};function d(t){var e=t.components,c=(0,s.Z)(t,r);return(0,o.kt)("wrapper",(0,a.Z)({},h,c,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this example we will be learning how to use databases by\nmaking a simple script that tracks some simple stats."),(0,o.kt)("p",null,"First we will go over how to do it in Typescript, then in Javascript."),(0,o.kt)("h2",{id:"typescript"},"Typescript"),(0,o.kt)("p",null,"Starting off we will need to import four things from beapi"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"client"),(0,o.kt)("li",{parentName:"ul"},"schema"),(0,o.kt)("li",{parentName:"ul"},"modal"),(0,o.kt)("li",{parentName:"ul"},"SchemaTypes")),(0,o.kt)("p",null,"You can do this like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n")),(0,o.kt)("p",null,"Then, we are going to need to add an interface which will describe\nwhat exactly we want to store in our database documents. In this\nexample we will be storing the join count, chat count, and death count."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Database Stats Interface.\ninterface Stats {\n  joinCount: number\n  chatCount: number\n  deathCount: number\n}\n")),(0,o.kt)("p",null,'Next, we are going to want to create our database schematic or "schema".\nWhen creating the schematic you will need to pass in the keys you plan\nto store and then of what schema type it is so BeAPI knows how to\nserialize the data accordingly.\nWe can do this like so:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Database Stats Interface.\ninterface Stats {\n  joinCount: number\n  chatCount: number\n  deathCount: number\n}\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema<Stats>({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n")),(0,o.kt)("p",null,"Next, we are going to need to convert out schema into a modal so we can manage data.\nModal names need to be unique otherwise data will start to conflict and recieve errors.\nSo ensure you do not name two different modals the same name.\nWe do this like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Database Stats Interface.\ninterface Stats {\n  joinCount: number\n  chatCount: number\n  deathCount: number\n}\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema<Stats>({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n\n// Create New Modal Named 'stats'.\nconst Stats = modal('stats', statsSchema)\n")),(0,o.kt)("p",null,"Now we have our stats modal for the database blueprinted out. Now we need to actually create it.\nTo do so we are going to use the method ",(0,o.kt)("inlineCode",{parentName:"p"},"findAll")," to get all documents by passing in an empty object.\nWe will then target the first item in the array, if it does not exist then we will create it.\nWe can do this like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Database Stats Interface.\ninterface Stats {\n  joinCount: number\n  chatCount: number\n  deathCount: number\n}\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema<Stats>({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n\n// Create New Modal Named 'stats'.\nconst Stats = modal('stats', statsSchema)\n\n// Get All Stats Documents And Select First One.\nlet statsDocument = Stats.findAll({})[0]\n// If No Stats Document, Create One And Assign It To statsDocument.\nif (!statsDocument) {\n  statsDocument = Stats.write({\n    joinCount: 0,\n    chatCount: 0,\n    deathCount: 0\n  })\n}\n")),(0,o.kt)("p",null,"Next, we will want to create three event listeners on client.\nOne for ",(0,o.kt)("inlineCode",{parentName:"p"},"Death"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Onjoin"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"OnChat"),".\nWe can do this like so: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Database Stats Interface.\ninterface Stats {\n  joinCount: number\n  chatCount: number\n  deathCount: number\n}\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema<Stats>({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n\n// Create New Modal Named 'stats'.\nconst Stats = modal('stats', statsSchema)\n\n// Get All Stats Documents And Select First One.\nlet statsDocument = Stats.findAll({})[0]\n// If No Stats Document, Create One And Assign It To statsDocument.\nif (!statsDocument) {\n  statsDocument = Stats.write({\n    joinCount: 0,\n    chatCount: 0,\n    deathCount: 0\n  })\n}\n\n// Create Event Listeners.\nclient.on('OnJoin', () => {\n\n})\nclient.on('OnChat', () => {\n\n})\nclient.on('Death', () => {\n\n})\n")),(0,o.kt)("p",null,"Now we are going to want to update our statsDocument values when\nthose event listeners go off.\nWe can do this like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Database Stats Interface.\ninterface Stats {\n  joinCount: number\n  chatCount: number\n  deathCount: number\n}\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema<Stats>({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n\n// Create New Modal Named 'stats'.\nconst Stats = modal('stats', statsSchema)\n\n// Get All Stats Documents And Select First One.\nlet statsDocument = Stats.findAll({})[0]\n// If No Stats Document, Create One And Assign It To statsDocument.\nif (!statsDocument) {\n  statsDocument = Stats.write({\n    joinCount: 0,\n    chatCount: 0,\n    deathCount: 0\n  })\n}\n\n// Create Event Listeners.\nclient.on('OnJoin', () => {\n  // Increment Join Count By 1.\n  statsDocument.joinCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\nclient.on('OnChat', () => {\n  // Increment Chat Count By 1.\n  statsDocument.chatCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\nclient.on('Death', () => {\n  // Increment Death Count By 1.\n  statsDocument.deathCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\n")),(0,o.kt)("p",null,"Congratulations! You have no successfully made a gametest that\nstores death, join, and chat count. However, we want to be able to\nsee this data now... right?\nSo finally, we will register a command that shows our stats.\nWe can do this like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Database Stats Interface.\ninterface Stats {\n  joinCount: number\n  chatCount: number\n  deathCount: number\n}\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema<Stats>({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n\n// Create New Modal Named 'stats'.\nconst Stats = modal('stats', statsSchema)\n\n// Get All Stats Documents And Select First One.\nlet statsDocument = Stats.findAll({})[0]\n// If No Stats Document, Create One And Assign It To statsDocument.\nif (!statsDocument) {\n  statsDocument = Stats.write({\n    joinCount: 0,\n    chatCount: 0,\n    deathCount: 0\n  })\n}\n\n// Create Event Listeners.\nclient.on('OnJoin', () => {\n  // Increment Join Count By 1.\n  statsDocument.joinCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\nclient.on('OnChat', () => {\n  // Increment Chat Count By 1.\n  statsDocument.chatCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\nclient.on('Death', () => {\n  // Increment Death Count By 1.\n  statsDocument.deathCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\n\n// Register Stats Command.\nclient.commands.register({\n  name: 'stats',\n  description: 'Show server stats.',\n}, (data) => {\n  // Create Message\n  const message = `Join Count: ${statsDocument.joinCount}\\n`\n  + `Chat Count: ${statsDocument.chatCount}\\n`\n  + `Death Count: ${statsDocument.deathCount}`\n  // Send, Sender Stat Data.\n  data.sender.sendMessage(message) \n})\n")),(0,o.kt)("p",null,"Yay! Now we can see the stats in game. If we save, build, restart the world,\nthen run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"-stats\n")),(0,o.kt)("p",null,"We should see our chat and join went up by one:\n",(0,o.kt)("img",{loading:"lazy",alt:"example",src:n(5754).Z,width:"1920",height:"191"})),(0,o.kt)("h2",{id:"javascript"},"Javascript"),(0,o.kt)("p",null,"Starting off we will need to import four things from beapi"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"client"),(0,o.kt)("li",{parentName:"ul"},"schema"),(0,o.kt)("li",{parentName:"ul"},"modal"),(0,o.kt)("li",{parentName:"ul"},"SchemaTypes")),(0,o.kt)("p",null,"You can do this like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n")),(0,o.kt)("p",null,'Next, we are going to want to create our database schematic or "schema".\nWhen creating the schematic you will need to pass in the keys you plan\nto store and then of what schema type it is so BeAPI knows how to\nserialize the data accordingly.\nWe can do this like so:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n")),(0,o.kt)("p",null,"Next, we are going to need to convert out schema into a modal so we can manage data.\nModal names need to be unique otherwise data will start to conflict and recieve errors.\nSo ensure you do not name two different modals the same name.\nWe do this like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n\n// Create New Modal Named 'stats'.\nconst Stats = modal('stats', statsSchema)\n")),(0,o.kt)("p",null,"Now we have our stats modal for the database blueprinted out. Now we need to actually create it.\nTo do so we are going to use the method ",(0,o.kt)("inlineCode",{parentName:"p"},"findAll")," to get all documents by passing in an empty object.\nWe will then target the first item in the array, if it does not exist then we will create it.\nWe can do this like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n\n// Create New Modal Named 'stats'.\nconst Stats = modal('stats', statsSchema)\n\n// Get All Stats Documents And Select First One.\nlet statsDocument = Stats.findAll({})[0]\n// If No Stats Document, Create One And Assign It To statsDocument.\nif (!statsDocument) {\n  statsDocument = Stats.write({\n    joinCount: 0,\n    chatCount: 0,\n    deathCount: 0\n  })\n}\n")),(0,o.kt)("p",null,"Next, we will want to create three event listeners on client.\nOne for ",(0,o.kt)("inlineCode",{parentName:"p"},"Death"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Onjoin"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"OnChat"),".\nWe can do this like so: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n\n// Create New Modal Named 'stats'.\nconst Stats = modal('stats', statsSchema)\n\n// Get All Stats Documents And Select First One.\nlet statsDocument = Stats.findAll({})[0]\n// If No Stats Document, Create One And Assign It To statsDocument.\nif (!statsDocument) {\n  statsDocument = Stats.write({\n    joinCount: 0,\n    chatCount: 0,\n    deathCount: 0\n  })\n}\n\n// Create Event Listeners.\nclient.on('OnJoin', () => {\n\n})\nclient.on('OnChat', () => {\n\n})\nclient.on('Death', () => {\n\n})\n")),(0,o.kt)("p",null,"Now we are going to want to update our statsDocument values when\nthose event listeners go off.\nWe can do this like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n\n// Create New Modal Named 'stats'.\nconst Stats = modal('stats', statsSchema)\n\n// Get All Stats Documents And Select First One.\nlet statsDocument = Stats.findAll({})[0]\n// If No Stats Document, Create One And Assign It To statsDocument.\nif (!statsDocument) {\n  statsDocument = Stats.write({\n    joinCount: 0,\n    chatCount: 0,\n    deathCount: 0\n  })\n}\n\n// Create Event Listeners.\nclient.on('OnJoin', () => {\n  // Increment Join Count By 1.\n  statsDocument.joinCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\nclient.on('OnChat', () => {\n  // Increment Chat Count By 1.\n  statsDocument.chatCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\nclient.on('Death', () => {\n  // Increment Death Count By 1.\n  statsDocument.deathCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\n")),(0,o.kt)("p",null,"Congratulations! You have no successfully made a gametest that\nstores death, join, and chat count. However, we want to be able to\nsee this data now... right?\nSo finally, we will register a command that shows our stats.\nWe can do this like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/index.js"',title:'"src/index.js"'},"import { client, schema, modal, SchemaTypes } from 'beapi-core'\n\n// Create New Stats Schema For Database.\nconst statsSchema = schema({\n  joinCount: SchemaTypes.Number,\n  chatCount: SchemaTypes.Number,\n  deathCount: SchemaTypes.Number\n})\n\n// Create New Modal Named 'stats'.\nconst Stats = modal('stats', statsSchema)\n\n// Get All Stats Documents And Select First One.\nlet statsDocument = Stats.findAll({})[0]\n// If No Stats Document, Create One And Assign It To statsDocument.\nif (!statsDocument) {\n  statsDocument = Stats.write({\n    joinCount: 0,\n    chatCount: 0,\n    deathCount: 0\n  })\n}\n\n// Create Event Listeners.\nclient.on('OnJoin', () => {\n  // Increment Join Count By 1.\n  statsDocument.joinCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\nclient.on('OnChat', () => {\n  // Increment Chat Count By 1.\n  statsDocument.chatCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\nclient.on('Death', () => {\n  // Increment Death Count By 1.\n  statsDocument.deathCount += 1\n  // Save Changes.\n  statsDocument.save()\n})\n\n// Register Stats Command.\nclient.commands.register({\n  name: 'stats',\n  description: 'Show server stats.',\n}, (data) => {\n  // Create Message\n  const message = `Join Count: ${statsDocument.joinCount}\\n`\n  + `Chat Count: ${statsDocument.chatCount}\\n`\n  + `Death Count: ${statsDocument.deathCount}`\n  // Send, Sender Stat Data.\n  data.sender.sendMessage(message) \n})\n")),(0,o.kt)("p",null,"Yay! Now we can see the stats in game. If we save, build, restart the world,\nthen run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"-stats\n")),(0,o.kt)("p",null,"We should see our chat and join went up by one:\n",(0,o.kt)("img",{loading:"lazy",alt:"example",src:n(5754).Z,width:"1920",height:"191"})))}d.isMDXComponent=!0},5754:function(t,e,n){e.Z=n.p+"assets/images/commands-database-19ab0148f47d5c9edefe699b8e07c204.png"}}]);